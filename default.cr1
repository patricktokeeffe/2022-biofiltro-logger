' BioFiltro Study GHG Logger
' Patrick O'Keeffe <pokeeffe@wsu.edu>
' https://github.com/patricktokeeffe/2022-biofiltro-logger
'
'Copyright 2022 - Patrick O'Keeffe for Washington State University
'
'Permission is hereby granted, free of charge, to any person obtaining a 
'copy of this software and associated documentation files (the "Software"), 
'to deal in the Software without restriction, including without limitation 
'the rights to use, copy, modify, merge, publish, distribute, sublicense, 
'and/or sell copies of the Software, and to permit persons to whom the 
'Software is furnished to do so, subject to the following conditions:
'
'The above copyright notice and this permission notice shall be included in 
'all copies or substantial portions of the Software.
'
'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
'IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
'FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
'THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
'LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
'FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
'DEALINGS IN THE SOFTWARE.

ConstTable(Constants) 'HINT named so can modify via LoggerNet
  Const UTC_OFFSET = -8  'hrs, logger offset relative to UTC time
  Const PAR_MULT As Float = -197.63 'unique sensor calibration, umol/(mV s m^2) - NEGATIVE for LI-190SA wiring convention
EndConstTable

Const CH4_COM = Com2
Const CH4_BAUD = 115200
Const CH4_FMT = 3 '8/n/1
Const CH4_BUFF = 800

Const N2O_COM = Com3
Const N2O_BAUD = 115200
Const N2O_FMT = 3 '8/n/1
Const N2O_BUFF = 800

Const WXT_COM = 7      'C7
Const WXT_SDI = 0      'SDI address
Public WXT_AZIMUTH As Float = 0  'orientation w.r.t. True North, degrees
Units WXT_AZIMUTH = degrees
    
Const PAR_DF = 1

Const AC_TYPEK_DF = 4

Const GPS_COM = Com1
Const MAX_DRIFT = 500 'ms

Const DAYS_DATA = 7   'how long to store data ON THE CARD? (Ring fill)

Public run_flag As Boolean 'For toggling GHG averaging off/on
Dim run_state As Boolean 'For triggering data reduction at end of run

Dim disable_ugga As Boolean
Dim ch4_year
Dim rTime(9)
Alias rTime(1) = this_year
Dim ch4_record As String * 400
Dim ugga(25) 'HINT use biofiltro_1Hz table instead of Public to monitor data
'1: date (only year captured)   '2: time (only hour captured)
Alias ugga(3)  = ugga_CH4        '4: CH4 s.d.
Alias ugga(5)  = ugga_H2O        '6: H2O s.d.
Alias ugga(7)  = ugga_CO2        '8: CO2 s.d.
Alias ugga(9)  = ugga_CH4_dry    '10: CH4 dry s.d.
Alias ugga(11) = ugga_CO2_dry    '12: CO2 dry s.d.
Alias ugga(13) = ugga_gas_P      '14: gas P s.d.
Alias ugga(15) = ugga_gas_T      '16: gas T s.d.
Alias ugga(17) = ugga_self_T     '18: self T s.d.
Alias ugga(19) = ugga_ringdown0  '20: ringdown #0 s.d.
Alias ugga(21) = ugga_ringdown1  '22: ringdown #1 s.d.
Alias ugga(23) = ugga_fit_flag   '24: MIU valve
'25: MIU description
Units ugga_CH4 = ppm
Units ugga_H2O = ppm
Units ugga_CO2 = ppm
Units ugga_CH4_dry = ppm (dry)
Units ugga_CO2_dry = ppm (dry)
Units ugga_gas_P = Torr
Units ugga_gas_T = degC
Units ugga_self_T = degC
Units ugga_ringdown0 = usec
Units ugga_ringdown1 = usec
Units ugga_fit_flag = arb

Dim disable_n2o As Boolean
Dim n2o_record As String * 400
Dim n2oco(25) 'HINT use biofiltro_1Hz table instead of Public to monitor data
'1: time (year),              '2: time (hour)
Alias n2oco(3)  = lgr_CO      '4: CO se
Alias n2oco(5)  = lgr_N2O     '6: N2O se
Alias n2oco(7)  = lgr_H2O     '8: H2O se
Alias n2oco(9)  = lgr_CO_dry  '10: CO dry se
Alias n2oco(11) = lgr_N2O_dry '12: N2O dry se
Alias n2oco(13) = lgr_gas_P   '14: GasP se
Alias n2oco(15) = lgr_gas_T   '16: GasT se
Alias n2oco(17) = lgr_amb_T   '18: AmbT se
'19: LTC0 (volts)             '20: LTCO (volts) se
'21: AIN5                     '22: AIN5 se
'23: DetOff                   '24: DetOff se
'25: Fit_Flag
Units lgr_CO = ppb
Units lgr_N2O = ppb
Units lgr_H2O = ppm
Units lgr_CO_dry = ppb (dry)
Units lgr_N2O_dry = ppb (dry)
Units lgr_gas_P = Torr
Units lgr_gas_T = degC
Units lgr_amb_T = degC

Const WXT_NVARS = 9
Dim WXT(WXT_NVARS)
Alias WXT(1)  = WindDir
Alias WXT(2)  = WindSpeed
Alias WXT(3)  = Tmpr
Alias WXT(4)  = RH
Alias WXT(5)  = Press
Alias WXT(6) = Rain_amt
Alias WXT(7) = Hail_amt
Alias WXT(8) = HeaterTmpr
Alias WXT(9) = HeaterVolts
Units WindDir = degrees
Units WindSpeed = m/s
Units Tmpr = degC
Units RH = percent
Units Press = hPa
Units Rain_amt = mm
Units Hail_amt = hits/cm^2
Units HeaterTmpr = degC
Units HeaterVolts = Vdc

Dim PAR_density
Units PAR_density = umol/(s m^2)

Dim LoggerTmpr
Dim PowerIn
Units LoggerTmpr = degC
Units PowerIn = Vdc

Dim AC_Tmpr
Units AC_Tmpr = degC

Dim nmea_sentence(2) As String * 110
Dim gps_data(15)
Alias gps_data(1) = latitude_a         'Degrees latitude (+ = North; - = South)
Alias gps_data(2) = latitude_b         'Minutes latitude
Alias gps_data(3) = longitude_a        'Degress longitude (+ = East; - = West)
Alias gps_data(4) = longitude_b        'Minutes longitude
Alias gps_data(5) = speed              'Speed
Alias gps_data(6) = course             'Course over ground
Alias gps_data(7) = magnetic_variation 'Magnetic variation from true north (+ = East; - = West)
Alias gps_data(8) = fix_quality        'GPS fix quality: 0 = invalid, 1 = GPS, 2 = differential GPS, 6 = estimated
Alias gps_data(9) = nmbr_satellites    'Number of satellites used for fix
Alias gps_data(10) = altitude          'Antenna altitude
Alias gps_data(11) = pps               'usec into sec of system clock when PPS rising edge occurs, typically 990,000 once synced
Alias gps_data(12) = dt_since_gprmc    'Time since last GPRMC string, normally less than 1 second
Alias gps_data(13) = gps_ready         'Counts from 0 to 10, 10 = ready
Alias gps_data(14) = max_clock_change  'Maximum value the clock was changed in msec
Alias gps_data(15) = nmbr_clock_change 'Number of times the clock was changed
Units latitude_a = degrees
Units latitude_b = minutes
Units longitude_a = degrees
Units longitude_b = minutes
Units speed = m/s
Units course = degrees
Units magnetic_variation = unitless
Units fix_quality = unitless
Units nmbr_satellites = unitless
Units altitude = m
Units pps = ms
Units dt_since_gprmc = s
Units gps_ready = unitless
Units max_clock_change = ms
Units nmbr_clock_change = samples


DataTable(biofiltro_1hz,True,-1)
  CardOut(0,DAYS_DATA*86400)
  DataInterval(0,1,Sec,10)
  Sample(1,lgr_CO,IEEE4)
  Sample(1,lgr_N2O,IEEE4)
  Sample(1,lgr_H2O,IEEE4)
  Sample(1,lgr_CO_dry,IEEE4)
  Sample(1,lgr_N2O_dry,IEEE4)
  Sample(1,lgr_gas_P,IEEE4)
  Sample(1,lgr_gas_T,FP2)
  Sample(1,lgr_amb_T,FP2)
  
  Sample(1,ugga_CH4,IEEE4)
  Sample(1,ugga_H2O,IEEE4)
  Sample(1,ugga_CO2,IEEE4)
  Sample(1,ugga_CH4_dry,IEEE4)
  Sample(1,ugga_CO2_dry,IEEE4)
  Sample(1,ugga_gas_P,IEEE4)
  Sample(1,ugga_gas_T,FP2)
  Sample(1,ugga_self_T,FP2)
EndTable

DataTable(biofiltro_1min,True,-1)
  CardOut(0,DAYS_DATA*1440)
  DataInterval(0,60,Sec,10)
  
  WindVector(1,WindSpeed,WindDir,FP2,(WindDir=NAN OR WindSpeed=NAN),0,0,0)
    FieldNames("WindSpeed_Avg,WindDir_vector_Avg,WindDir_Std")
    Units WindSpeed_Avg = m/s
    Units WindDir_vector_Avg = degrees
    Units WindDir_Std = degrees
  Average(1,WXT_AZIMUTH,FP2,WXT_AZIMUTH=NAN)
  Average(1,Tmpr,FP2,Tmpr=NAN)
  Average(1,RH,FP2,RH=NAN)
  Average(1,Press,IEEE4,Press=NAN) 'overranges FP2 precision
  Totalize(1,Rain_amt,FP2,Rain_amt=NAN)
  Totalize(1,Hail_amt,FP2,Hail_amt=NAN)
  Average(1,HeaterTmpr,FP2,HeaterTmpr=NAN)
  Average(1,HeaterVolts,FP2,HeaterVolts=NAN)

  Average(1,PAR_density,FP2,PAR_density=NAN)
  Average(1,PAR_MULT,IEEE4,PAR_MULT=NAN)
    FieldNames("PAR_MULT_Avg")
    Units PAR_MULT_Avg = umol/(mV s m^2)

  Average(1,LoggerTmpr,FP2,LoggerTmpr=NAN)
  Average(1,AC_Tmpr,FP2,AC_Tmpr=NAN)
  Average(1,lgr_gas_T,FP2,disable_n2o)
  Average(1,lgr_amb_T,FP2,disable_n2o)
  Average(1,ugga_gas_T,FP2,disable_ugga)
  Average(1,ugga_self_T,FP2,disable_ugga)
EndTable

DataTable(biofiltro_gps,True,-1) 'HINT for monitoring Dim'd vars
  CardOut(0,DAYS_DATA*1440)
  DataInterval(0,60,Sec,10)
  Sample(15,gps_data(1),IEEE4)
EndTable

'XXXX HINT omit Units definitions - duplicates will crash compiler
DataTable(biofiltro_runs,(run_flag <> run_state),-1)
  CardOut(0,30)
  OpenInterval
  
  Totalize(1,ABS(run_flag),IEEE4,run_flag=NAN)
    FieldNames("run_duration")
    Units run_duration = seconds

  Average(1,lgr_CO_dry,IEEE4,disable_n2o)
  StdDev(1,lgr_CO_dry,IEEE4,disable_n2o)
  Average(1,lgr_N2O_dry,IEEE4,disable_n2o)
  StdDev(1,lgr_N2O_dry,IEEE4,disable_n2o)
  Average(1,lgr_H2O,IEEE4,disable_n2o)
  StdDev(1,lgr_H2O,IEEE4,disable_n2o)
  Average(1,lgr_gas_P,IEEE4,disable_n2o)
  StdDev(1,lgr_gas_P,FP2,disable_n2o)
  Average(1,lgr_gas_T,FP2,disable_n2o)
  StdDev(1,lgr_gas_T,FP2,disable_n2o)
  Average(1,lgr_amb_T,FP2,disable_n2o)
  StdDev(1,lgr_amb_T,FP2,disable_n2o)
  
  Average(1,ugga_CH4_dry,IEEE4,disable_ugga)
  StdDev(1,ugga_CH4_dry,IEEE4,disable_ugga)
  Average(1,ugga_CO2_dry,IEEE4,disable_ugga)
  StdDev(1,ugga_CO2_dry,IEEE4,disable_ugga)
  Average(1,ugga_H2O,IEEE4,disable_ugga)
  StdDev(1,ugga_H2O,IEEE4,disable_ugga)
  Average(1,ugga_gas_P,IEEE4,disable_ugga)
  StdDev(1,ugga_gas_P,IEEE4,disable_ugga)
  Average(1,ugga_gas_T,FP2,disable_ugga)
  StdDev(1,ugga_gas_T,FP2,disable_ugga)
  Average(1,ugga_self_T,FP2,disable_ugga)
  StdDev(1,ugga_self_T,FP2,disable_ugga)
  
  WindVector(1,WindSpeed,WindDir,FP2,(WindDir=NAN OR WindSpeed=NAN),0,0,0)
    FieldNames("WindSpeed_Avg,WindDir_vector_Avg,WindDir_Std")
  Average(1,WXT_AZIMUTH,IEEE4,WXT_AZIMUTH=NAN)
  Average(1,Tmpr,IEEE4,Tmpr=NAN)
  Average(1,RH,IEEE4,RH=NAN)
  Average(1,Press,IEEE4,Press=NAN)
  Totalize(1,Rain_amt,FP2,Rain_amt=NAN)
  Totalize(1,Hail_amt,FP2,Hail_amt=NAN)
  Average(1,HeaterTmpr,FP2,HeaterTmpr=NAN)
  Average(1,HeaterVolts,FP2,HeaterVolts=NAN)

  Average(1,PAR_density,FP2,PAR_density=NAN) 'rounding PAR ok
  Average(1,PAR_MULT,IEEE4,PAR_MULT=NAN)
    FieldNames("PAR_MULT_Avg")

  Average(1,LoggerTmpr,FP2,LoggerTmpr=NAN)
  Average(1,AC_Tmpr,FP2,AC_Tmpr=NAN)
EndTable


DisplayMenu("Trailer WA-25012E",-1)
  MenuItem("Run flag", run_flag)
  SubMenu("Temperature (*C)")
    DisplayValue("Ambient", Tmpr)
    DisplayValue("AC", AC_Tmpr)
    DisplayValue("Logger", LoggerTmpr)
    DisplayValue("N2O/CO cell", lgr_gas_T)
    DisplayValue("N2O/CO amb", lgr_amb_T)
    DisplayValue("CH4/CO2 cell", ugga_gas_T)
    DisplayValue("CH4/CO2 amb", ugga_self_T)
  EndSubMenu
  SubMenu("N2O/CO")
    DisplayValue("N2O, ppb", lgr_N2O)
    DisplayValue("N2O (dry)", lgr_N2O_dry)
    DisplayValue("CO, ppb", lgr_CO)
    DisplayValue("CO (dry)", lgr_CO_dry)
    DisplayValue("H2O, ppm", lgr_H2O)
    DisplayValue("Cell P", lgr_gas_P)
    DisplayValue("Cell T", lgr_gas_T)
    DisplayValue("Amb T", lgr_amb_T)
  EndSubMenu
  SubMenu("CH4/CO2")
    DisplayValue("CH4, ppm", ugga_CH4)
    DisplayValue("CH4 (dry)", ugga_CH4_dry)
    DisplayValue("CO2, ppm", ugga_CO2)
    DisplayValue("CO2 (dry)", ugga_CO2_dry)
    DisplayValue("H2O, ppm", ugga_H2O)
    DisplayValue("Cell P", ugga_gas_P)
    DisplayValue("Cell T", ugga_gas_T)
    DisplayValue("Self T", ugga_self_T)
  EndSubMenu
  SubMenu("WXT510")
    MenuItem("Azimuth", WXT_AZIMUTH)
    DisplayValue("WD, deg", WindDir)
    DisplayValue("WS, m/s", WindSpeed)
    DisplayValue("T, *C", Tmpr)
    DisplayValue("RH, %", RH)
    DisplayValue("P, hPa", Press)
    DisplayValue("Rain, mm", Rain_amt)
    DisplayValue("Hail, hits/cm^2", Hail_amt)
    DisplayValue("Heater, *C", HeaterTmpr)
    DisplayValue("Heater, Vdc", HeaterVolts)
  EndSubMenu
  SubMenu("GPS")
    DisplayValue("Lat deg", latitude_a)
    DisplayValue("Lat min", latitude_b)
    DisplayValue("Long deg", longitude_a)
    DisplayValue("Long min", longitude_b)
    DisplayValue("Mag decl.", magnetic_variation)
    DisplayValue("Altitude", altitude)
    DisplayValue("GPS Ready", gps_ready)
  EndSubMenu
  DisplayValue("PAR (approx)", PAR_density)
  DisplayValue("PowerIn, Vdc", PowerIn)
EndMenu


BeginProg
  SerialOpen(N2O_COM,N2O_BAUD,N2O_FMT,0,N2O_BUFF)
  SerialOpen(CH4_COM,CH4_BAUD,CH4_FMT,0,CH4_BUFF)
  
  Scan (500,mSec,0,0)
    SerialIn(n2o_record,N2O_COM,5,&h0A,N2O_BUFF)
    If (Len(n2o_record)) Then
      SplitStr(n2oco(1),n2o_record,", ",25,6)
      disable_n2o = NOT(n2oco(25) = 3) 'HACK - assume Fit_Flag always 3
      n2o_record = ""
      If (NOT disable_n2o) Then
        lgr_CO *= 1000     'ppm --> ppb
        lgr_N2O *= 1000
        lgr_CO_dry *= 1000
        lgr_N2O_dry *= 1000
      EndIf
    EndIf

    SerialIn(ch4_record,CH4_COM,5,&h0A,CH4_BUFF)
    If (Len(ch4_record)) Then
      SplitStr(ugga(1),ch4_record,", ",25,6)
      ch4_year = ugga(1) 'convert string->float
      disable_ugga = NOT(ch4_year = this_year)
    EndIf
    
    CallTable(biofiltro_1hz)
    If (run_flag) 'during a sampling run...
      run_state = run_flag 'ensure data table trigger is false...
      CallTable(biofiltro_runs) 'and do intermediate processing
    ElseIf (run_state AND NOT run_flag) 'but when run is halted...
      'then data table trigger becomes true (i.e. run_state != run_flag)
      CallTable(biofiltro_runs) 'so call for final data storage
      run_state = run_flag 'and then reset flags for next run
    EndIf
  NextScan
  
  SlowSequence
  Scan (5,Sec,0,0)
    PanelTemp(LoggerTmpr,250)
    Battery(PowerIn)
    If (PowerIn > 12.6) Then
      SW12(True) 'allow WXT heating
    Else
      SW12(False) 'disable on battery
    EndIf
    TCDiff(AC_Tmpr,1,mV2_5,AC_TYPEK_DF,TypeK,LoggerTmpr,True,0,_60Hz,1,0)
    
    SDI12Recorder(WXT(1),WXT_COM,WXT_SDI,"R!",1,0,-1)
    If (WindDir <> NAN) Then
      WindDir = (WindDir + WXT_AZIMUTH) MOD 360
    EndIf
    
    VoltDiff(PAR_density,1,mV25,PAR_DF,True,0,_60Hz,PAR_MULT,0)
    If (PAR_density < 0) Then
      PAR_density = 0
    EndIf
    
    CallTable(biofiltro_1min)
  NextScan
  
  SlowSequence
  Scan(1,Min,1,0)
    RealTime(rTime(1)) 'HINT for LGR CH4 message validation
    GPS(gps_data(1),GPS_COM,UTC_OFFSET*3600,MAX_DRIFT,nmea_sentence(1))
    CallTable(biofiltro_gps)
  NextScan
EndProg

